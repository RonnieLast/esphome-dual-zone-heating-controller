substitutions:
  device_name: "boilerrelayboard"
  friendly_name: "Boiler Relay Board"
  relay_restore_mode: RESTORE_DEFAULT_ON

esphome:
  name: relayboard1
  on_boot:
    priority: -100  # Network sessions such as MQTT/API are running at this level
    then:
      # read the RTC time once when the system boots
      - ds1307.read_time:

preferences:
  flash_write_interval: 3min

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
  level: DEBUG

# MQTT is also enabled - https://esphome.io/components/mqtt.html
# API and MQTT in use. Adding line "reboot_timeout" to prevent reboot if API does not connect (isolated mode)
api: # No API when MQTT owns the comms
  encryption:
    key: ""
  reboot_timeout: 0s   # Disable reboot if no HA connection

mqtt:
  broker: '10.0.0.15'
  port: 1883
  topic_prefix: boilerrelayboard
  #username: <your username here>
  #password: <your password here>
  discovery: false  # Discovery false to prevent duplication of MQTT and API device entities in HA
  discovery_retain: true
  birth_message:
  will_message:
  on_message:
    - topic: boilerrelayboard/sensor/restart
      payload: 'ON'
      then:
        - switch.toggle: boilerrelayboard_restart

ota:
  platform: esphome
  password: ""

mdns:
  disabled: false

web_server:
  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 10.0.0.68
    gateway: 10.0.0.1
    subnet: 255.255.254.0
  reboot_timeout:  15min   # Setting to 15min (default) so that we can recover the WiFi connection reasonably quickly
  ap:
    ssid: "Central Heating Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

i2c:
  # Support for the RTC with backup battery and OLED display
  sda: GPIO21
  scl: GPIO22
  scan: True
  frequency: 300kHz # Frequency of 300kHz eliminates most of the latency errors
  id: bus_a

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    id: white_oled
    contrast: 40%
    # reset_pin: GPIO23
    # address: 0x3C
    pages:
#      - id: page1 
#        lambda: |-
#            char str[17];
#            //const time_t oneHourInSec = 3600;
#            //time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
#            time_t currTime = id(ds1307_time).now().timestamp;
#            strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
#            it.printf(-10, 64, id(font3), TextAlign::BOTTOM_RIGHT, "Time: %s", str);
#            it.printf(0, 0, id(font1), "Heating");
#            it.printf(0, 20, id(font1), "Controller");
      - id: page2
        lambda: |-
            char str[17];
            time_t currTime = id(ds1307_time).now().timestamp;
            strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
            it.printf(0, 0, id(font3), "Time: %s", str);
            it.printf(0, 44, id(font3), TextAlign::BOTTOM_LEFT, "Upsta Avg %.1f°C", id(upstairs_room_temps_average).state);
            it.printf(0, 64, id(font3), TextAlign::BOTTOM_LEFT, "Downs Avg %.1f°C", id(downstairs_room_temps_average).state);
      - id: page4
        lambda: |-
            it.printf(0, 0, id(font3), "Upstairs");
            it.printf(0, 44, id(font2), TextAlign::BOTTOM_LEFT, "State: %s", id(text_state_us_heating).state.c_str());
            it.printf(0, 64, id(font2), TextAlign::BOTTOM_LEFT, "Time:     %s", id(text_time_us_heating).state.c_str());
      - id: page3
        lambda: |-
            it.printf(0, 0, id(font3), "Downstairs");
            it.printf(0, 44, id(font2), TextAlign::BOTTOM_LEFT, "State: %s", id(text_state_ds_heating).state.c_str());
            it.printf(0, 64, id(font2), TextAlign::BOTTOM_LEFT, "Time:     %s", id(text_time_ds_heating).state.c_str());
      - id: page5
        lambda: |-
            it.printf(0, 0, id(font3), "Hot Tank");
            it.printf(0, 44, id(font2), TextAlign::BOTTOM_LEFT, "Temp:  %.1f°C", id(hot_tank_air_temperature_6_filtered).state);
            it.printf(0, 64, id(font2), TextAlign::BOTTOM_LEFT, "Energy: %.1fkWh", id(hot_tank_energy).state);

interval:
  - interval: 3s   # Interval timer for page changes on OLED display
    then:
      - display.page.show_next: white_oled
      - component.update: white_oled
  - interval: 1000ms # Interval for status LED
    then:
      - output.turn_on: statusled
      - delay: 500ms
      - output.turn_off: statusled

font:
  - file: "gfonts://Kanit"
    id: font1
    size: 20
  - file: "gfonts://Roboto"
    id: font2
    size: 18
  - file: "gfonts://Roboto"
    id: font3
    size: 16

globals:
  # Global Enable/Disable for holiday/summertime disablement
  # We want to restore these settings from flash on power restore
  - id: heating_global_enable
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: heating_downstairs_enable
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: heating_upstairs_enable
    type: bool
    restore_value: yes
    initial_value: 'true'
  - id: hot_water_enable
    type: bool
    restore_value: yes
    initial_value: 'true'

time:
  - platform: ds1307
    timezone: Europe/Dublin
    id: ds1307_time
    update_interval: never
  - platform: homeassistant
    id: homeassistant_time
    # try to sync via HA and write it to RTC
    on_time_sync:
      then:
        ds1307.write_time:
    # Secondary NTP sync
  - platform: sntp
    servers: 10.0.0.1
    id: my_time
    # #### LOCAL HEATING SCHEDULES ####
    # These are locally set automatic heating schedules
    on_time:
      # HOT WATER, every morning, 05.00 for 1hr30 mins
      - hours: 05
        minutes: 00
        seconds: 00
        days_of_week: MON-SUN
        then:
          - script.execute: hot_water_1hr30
      # Upstairs, every weekday morning, 07.00 for 30 mins
      - hours: 07
        minutes: 00
        seconds: 00
        days_of_week: MON-FRI
        then:
          - script.execute: heating_upstairs_30min
      # Downstairs, every weekday morning, 07.20 for 30 mins
      - hours: 07
        minutes: 20
        seconds: 00
        days_of_week: MON-FRI
        then:
          - script.execute: heating_downstairs_30min
      # Upstairs and downstairs, every weekend morning, 08.30 for 30 mins
      - hours: 08
        minutes: 30
        seconds: 00
        days_of_week: SAT,SUN
        then:
          - script.execute: heating_upstairs_30min
          # - delay: 30s
          - script.execute: heating_downstairs_30min
      # Upstairs, every weekday night, 21:00 for 30 min
      - hours: 21
        minutes: 00
        seconds: 00
        days_of_week: MON-FRI
        then:
          - script.execute: heating_upstairs_30min
      # Upstairs, weekend, 21:45 for 30 min
      - hours: 21
        minutes: 45
        seconds: 00
        days_of_week: SAT,SUN
        then:
          - script.execute: heating_upstairs_30min

output:
  # Status LED for downstairs
  # This can be the LED within the button
  - platform: ledc
    pin: GPIO14
    id: button_light_ds
    inverted: False
  # Status LED on upstairs
  # This can be the LED within the button
  - platform: ledc
    pin: GPIO18
    id: button_light_us
    inverted: False
  - platform: ledc
    pin: GPIO20
    id: button_light_dhw
    inverted: False
  - platform: gpio # This is the status LED on GPIO23
    pin: GPIO23
    id: statusled

light:
  - platform: monochromatic
    # These are the LED blink styles for each LED to display the status.
    name: Downstairs Heating
    output: button_light_ds
    id: button_light_switch_ds
    internal: true
    # restore_mode: ALWAYS_OFF
    effects:
      - pulse:
          name: "Blink"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.1s
          update_interval: 0.4s
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 2s
      - pulse:
          name: "Standby 1"
          transition_length: 1s
          update_interval: 4s
      - strobe:
          name: "Standby2"
          colors:
            - state: true
              brightness: 70%
              duration: 120ms
            - state: false
              duration: 1800ms
      - pulse:
          name: "HeatingActive"
          transition_length: 1.5s
          update_interval: 2s
      - pulse:
          name: "Automode2"
          transition_length:
            on_length: 500ms
            off_length: 500ms
          update_interval: 1s
  - platform: monochromatic
    name: Upstairs Heating
    output: button_light_us
    id: button_light_switch_us
    internal: true
    # restore_mode: ALWAYS_OFF
    effects:
      - pulse:
          name: "Blink"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.1s
          update_interval: 0.4s
      - pulse:
          name: "Slow Pulse"
          transition_length: 1s
          update_interval: 2s
      - pulse:
          name: "Standby 1"
          transition_length: 1s
          update_interval: 4s
      - strobe:
          name: "Standby2"
          colors:
            - state: true
              brightness: 70%
              duration: 120ms
            - state: false
              duration: 1800ms
      - pulse:
          name: "HeatingActive"
          transition_length: 1.5s
          update_interval: 2s
      - pulse:
          name: "Automode2"
          transition_length:
            on_length: 500ms
            off_length: 500ms
          update_interval: 1s
  - platform: monochromatic
    name: Hot Water
    output: button_light_dhw
    id: button_light_switch_dhw
    internal: true
    # restore_mode: ALWAYS_OFF
    effects:
      - strobe:
          name: "Standby2"
          colors:
            - state: true
              brightness: 70%
              duration: 150ms
            - state: false
              duration: 1500ms
      - pulse:
          name: "HeatingActive"
          transition_length: 1.5s
          update_interval: 2s

text_sensor:
  # These text-sensors push text to HA for status heating channel updates 
  - platform: template
    name: "Downstairs state"
    id: text_state_ds_heating
  - platform: template
    name: "Upstairs state"
    id: text_state_us_heating
  - platform: template
    name: "Hot Water state"
    id: text_state_hot_water
  - platform: template
    name: "Downstairs on until"
    id: text_time_ds_heating
    lambda: return {""};
  - platform: template
    name: "Upstairs on until"
    id: text_time_us_heating
    lambda: return {""};
  - platform: template
    name: "Hot Water BOOST until"
    id: text_time_hot_water
    lambda: return {""};
  - platform: template
    name: "Controller Time"
    id: text_controller_time
    lambda: return id(ds1307_time).now().strftime("%H:%M");
    update_interval: 30s

binary_sensor:
  # To enable zone heating there are three types of button-press:
    # Single press (on_press) calls a 1hr heating boost
    # Double press (within 5 sec of the first) calls a 2hr heating boost
    # Long press (hold >3 sec) is a cancellation of boost
  - platform: gpio
    # UPSTAIRS ZONE - physical button
    pin: 
      number: GPIO17
      mode:
        input: true
        pullup: true
      inverted: True
    id: upstairs_button_1
    filters:
      - delayed_on: 20ms
    on_click: # Long press
      min_length: 3000ms
      max_length: 6000ms
      then:
        - script.execute: turn_off_upstairs
    on_press: # Single press
      then:
        - script.execute: heating_upstairs_1hr
    on_double_click: # Double press
      min_length: 100ms
      max_length: 5000ms
      then:
        - script.execute: heating_upstairs_2hr
  - platform: gpio
    # DOWNSTAIRS ZONE - physical button
    pin: 
      number: GPIO13
      mode:
        input: true
        pullup: true
      inverted: True
    id: downstairs_button_1
    filters:
      - delayed_on: 20ms
    on_click: # Long press
      min_length: 3000ms
      max_length: 6000ms
      then:
        - script.execute: turn_off_downstairs
    on_press: # Single press
      then:
        - script.execute: heating_downstairs_1hr
    on_double_click: # Double press
      min_length: 100ms
      max_length: 5000ms
      then:
        - script.execute: heating_downstairs_2hr
    # Heating global or zone enable / disable
  - platform: homeassistant
    name: "Heating Global Enable"
    entity_id: input_boolean.heating_global_enable
    on_state:
      then:
        - lambda: |-
            id(heating_global_enable) = x;
  - platform: homeassistant
    name: "Heating Downstairs Enable"
    entity_id: input_boolean.heating_downstairs_enable
    on_state:
      then:
        - lambda: |-
            id(heating_downstairs_enable) = x;
  - platform: homeassistant
    name: "Heating Upstairs Enable"
    entity_id: input_boolean.heating_upstairs_enable
    on_state:
      then:
        - lambda: |-
            id(heating_upstairs_enable) = x;
  - platform: homeassistant  # Param coming from HA
    name: "Full Brightness"   # If sun is down then dim the lights and display
    entity_id: "binary_sensor.heating_controller_full_brightness"
    id: "heating_controller_full_brightness"


switch:
    # Four relay outputs, exposed as switches in Home Assistant
  - platform: gpio
    # UPSTAIRS RELAY
    pin: GPIO32
    name: Heating US relay direct
    id: brb_us_direct
    internal: true

  - platform: gpio
    # DOWNSTAIRS RELAY
    pin: GPIO33
    name: Heating DS relay direct
    id: brb_ds_direct
    internal: true

  - platform: gpio
    # HOT WATER RELAY
    pin: GPIO25
    name: Hot Water relay direct
    id: brb_hot_water_direct
    internal: true

  - platform: gpio
    # NOT USED
    pin: GPIO26
    name: Relay4 direct
    id: relay4_direct
    internal: true

  - platform: template # Switch exposed to HA
    name: "Heating upstairs 30m"
    id: "heating_upstairs_30min_toggle"
    turn_on_action:
      - script.execute: heating_upstairs_30min

  - platform: template # Switch exposed to HA
    name: "Heating downstairs 30m"
    id: "heating_downstairs_30min_toggle"
    turn_on_action:
      - script.execute: heating_downstairs_30min

  - platform: template # Switch exposed to HA
    name: "Heating upstairs 1hr"
    id: "brb_heating_us_1hr_toggle"
    turn_on_action:
      - script.execute: heating_upstairs_1hr

  - platform: template # Switch exposed to HA
    name: "Heating downstairs 1hr"
    id: "brb_heating_ds_1hr_toggle"
    turn_on_action:
      then:
        - script.execute: heating_downstairs_1hr

  - platform: template # Switch exposed to HA
    name: "Heating downstairs 2hr"
    id: "brb_heating_ds_2hr_toggle"
    turn_on_action:
      then:
        - script.execute: heating_downstairs_2hr

#  - platform: template # Switch exposed to HA
#    name: "Heating upstairs 2hr"
#    id: "brb_heating_us_2hr_toggle"
#    turn_on_action:
#      then:
#        - script.execute: heating_upstairs_2hr

  - platform: template # Switch exposed to HA
    name: "Hot Water BOOST"
    id: "brb_hot_water_boost_toggle"
    turn_on_action:
      then:
        - script.execute: hot_water_1hr30

  - platform: template # Switch exposed to HA
    # AUTO mode UPSTAIRS
    name: "AUTO mode - Upstairs"
    id: "brb_us_auto_mode_toggle"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      then:
        - script.execute: auto_mode_on_us
    turn_off_action: 
      then:
        - script.execute: auto_mode_off_us

  - platform: template # Switch exposed to HA
    # AUTO mode DOWNSTAIRS
    name: "AUTO mode - Downstairs"
    id: "brb_ds_auto_mode_toggle"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_on_action:
      then:
        - script.execute: auto_mode_on_ds
    turn_off_action: 
      then:
        - script.execute: auto_mode_off_ds

  - platform: restart
    id: boilerrelayboard_restart
    name: "Boiler Relay Board Restart"

# ############# SCRIPTS ##############
script:
  - id: hot_water_1hr30
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(hot_water_enable) = true;
          then: 
            - switch.turn_on: brb_hot_water_direct
            - logger.log: "BoilerRelayBoard Hot Water BOOST On"
            - text_sensor.template.publish:
                id: text_time_hot_water # When run, send a text string to HA with the boost time
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 5400;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - delay: 90 min
            - switch.turn_off: brb_hot_water_direct
            - logger.log: "BoilerRelayBoard Hot Water BOOST off"
            - text_sensor.template.publish:
                id: text_time_hot_water # When complete, send a text string to HA containing 'off'
                state: !lambda |-
                  return {"off"};

  - id: heating_upstairs_30min
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(heating_global_enable) = true || id(heating_upstairs_enable) == true;
          then: 
            - switch.turn_on: brb_us_direct
            - logger.log: "BoilerRelayBoard US on 30m"
            - text_sensor.template.publish:
                id: text_state_us_heating
                state: !lambda |-
                    return {"BOOST"};
            - text_sensor.template.publish:
                id: text_time_us_heating # When run, send a text string to HA with the boost completion time
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 3600;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - delay: 30 min
            - switch.turn_off: brb_us_direct
            - logger.log: "BoilerRelayBoard US off"
            - display.page.show: page4
            - if:    # Check if we are still in AUTO mode and then set the zone back into the correct state
                condition:
                  lambda: 'return id(brb_us_auto_mode_toggle).state == true;'
                then:
                  - script.execute: auto_mode_on_us
                else: 
                  - script.execute: boost_mode_off_us
            - logger.log: "BoilerRelayBoard US off 30m"

  - id: heating_downstairs_30min
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(heating_global_enable) = true || id(heating_downstairs_enable) == true;
          then:
            - switch.turn_on: brb_ds_direct
            - logger.log: "BoilerRelayBoard DS on 30m"
            - text_sensor.template.publish:
                id: text_state_ds_heating
                state: !lambda |-
                    return {"BOOST"};
            - text_sensor.template.publish:
                id: text_time_ds_heating # When run, send a text string to HA with the boost completion time
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 3600;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - delay: 30 min
            - switch.turn_off: brb_ds_direct
            - logger.log: "BoilerRelayBoard DS off"
            - display.page.show: page3
            - if:    # Check if we are still in AUTO mode and then set the zone back into the correct state
                condition:
                  lambda: 'return id(brb_ds_auto_mode_toggle).state == true;'
                then:
                  - script.execute: auto_mode_on_ds
                else: 
                  - script.execute: boost_mode_off_ds
                  - logger.log: "BoilerRelayBoard DS off 30m"

  - id: heating_upstairs_1hr
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(heating_global_enable) = true || id(heating_upstairs_enable) == true;
          then:
            - switch.turn_on: brb_us_direct
            - light.turn_on: 
                id:  button_light_switch_us
                effect: none
                brightness: 90%
            - text_sensor.template.publish:
                id: text_state_us_heating
                state: !lambda |-
                    return {"BOOST"};
            - text_sensor.template.publish:
                id: text_time_us_heating # When run, send a text string to HA with the boost completion time
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 3600;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - logger.log: "BoilerRelayBoard US on 1hr"
            - display.page.show: page4
            - delay: 60 min
            - switch.turn_off: brb_us_direct
            - if:    # Check if we are still in AUTO mode and then set the zone back into the correct state
                condition:
                  lambda: 'return id(brb_us_auto_mode_toggle).state == true;'
                then:
                  - script.execute: auto_mode_on_us
                else: 
                  - script.execute: boost_mode_off_us
            - logger.log: "BoilerRelayBoard US off 1hr"

  - id: heating_downstairs_1hr
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(heating_global_enable) = true || id(heating_downstairs_enable) == true;
          then:
            - switch.turn_on: brb_ds_direct
            - light.turn_on: 
                id:  button_light_switch_ds
                effect: none
                brightness: 90%
            - text_sensor.template.publish:
                id: text_state_ds_heating
                state: !lambda |-
                    return {"BOOST"};
            - text_sensor.template.publish:
                id: text_time_ds_heating
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 3600;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - logger.log: "BoilerRelayBoard DS on 1hr"
            - display.page.show: page3
            - delay: 60 min
            - switch.turn_off: brb_ds_direct
            - if:    # Check if we are still in AUTO mode and then set the zone back into the correct state
                condition:
                  lambda: 'return id(brb_ds_auto_mode_toggle).state == true;'
                then:
                  - script.execute: auto_mode_on_ds
                else: 
                  - script.execute: boost_mode_off_ds
                  - logger.log: "BoilerRelayBoard DS off 1hr"

  - id: heating_upstairs_2hr
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(heating_global_enable) = true || id(heating_upstairs_enable) == true;
          then:
            - switch.turn_on: brb_us_direct
            - light.turn_on: 
                id:  button_light_switch_us
                effect: none
                brightness: 90%
            - text_sensor.template.publish:
                id: text_state_us_heating
                state: !lambda |-
                    return {"BOOST"};
            - text_sensor.template.publish:
                id: text_time_us_heating # When run, send a text string to HA with the boost completion time
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 7200;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - logger.log: "BoilerRelayBoard US on 2hr"
            - display.page.show: page4
            - delay: 120 min
            - switch.turn_off: brb_us_direct
            - if:    # Check if we are still in AUTO mode and then set the zone back into the correct state
                condition:
                  lambda: 'return id(brb_us_auto_mode_toggle).state == true;'
                then:
                  - script.execute: auto_mode_on_us
                else: 
                  - script.execute: boost_mode_off_us
            - logger.log: "BoilerRelayBoard US off 2hr"

  - id: heating_downstairs_2hr
    mode: restart
    then:
      - if:
          condition:
            lambda: |-
              return id(heating_global_enable) = true || id(heating_downstairs_enable) == true;
          then:
            - switch.turn_on: brb_ds_direct
            - light.turn_on: 
                id:  button_light_switch_ds
                effect: none
                brightness: 90%
            - text_sensor.template.publish:
                id: text_state_ds_heating
                state: !lambda |-
                    return {"BOOST"};
            - text_sensor.template.publish:
                id: text_time_ds_heating
                state: !lambda |-
                    char str[17];
                    const time_t oneHourInSec = 7200;
                    time_t currTime = id(ds1307_time).now().timestamp + oneHourInSec;
                    strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
                    return  { str };
            - logger.log: "BoilerRelayBoard DS on 2hr"
            - display.page.show: page3
            - delay: 120 min
            - switch.turn_off: brb_ds_direct
            - if:    # Check if we are still in AUTO mode and then set the zone back into the correct state
                condition:
                  lambda: 'return id(brb_ds_auto_mode_toggle).state == true;'
                then:
                  - script.execute: auto_mode_on_ds
                else: 
                  - script.execute: boost_mode_off_ds
            - logger.log: "BoilerRelayBoard DS off 2hr"

      # ####### Thermostat AUTO modes ########
  - id: auto_mode_on_us
    # Heating into AUTO mode UPSTAIRS
    mode: single
    then:
      - climate.control:
          id: thermostat_us
          mode: "HEAT"
      - light.turn_on:
          id: button_light_switch_us
          effect: "Automode2"
          brightness: 50%
      - logger.log: "BoilerRelayBoard US AUTO mode"
      - display.page.show: page3
      # Then also set the respective screen element to AUTO
      - text_sensor.template.publish:
          id: text_state_us_heating
          state: !lambda |-
            return {"AUTO"};

  - id: auto_mode_off_us
    # Turn off AUTO mode UPSTAIRS
    mode: single
    then:
      - climate.control:
          id: thermostat_us
          mode: "OFF"
      - light.turn_on:
          id: button_light_switch_us
          effect: "Standby2"
          brightness: 30%
      - logger.log: "BoilerRelayBoard US AUTO mode OFF"
      - display.page.show: page3
      # Then also set the respective screen element to AUTO
      - text_sensor.template.publish:
          id: text_state_us_heating
          state: !lambda |-
            return {"off"};

  - id: auto_mode_on_ds
    # Heating into AUTO mode DOWNSTAIRS
    mode: single
    then:
      - climate.control:
          id: thermostat_ds
          mode: "HEAT"
      - light.turn_on:
          id: button_light_switch_ds
          effect: "Automode2"
          brightness: 50%
      - logger.log: "BoilerRelayBoard DS AUTO mode"
      - display.page.show: page3
      # Then also set the respective screen element to AUTO
      - text_sensor.template.publish:
          id: text_state_ds_heating
          state: !lambda |-
            return {"AUTO"};

  - id: auto_mode_off_ds
    # Turn off AUTO mode DOWNSTAIRS
    mode: single
    then:
      - climate.control:
          id: thermostat_ds
          mode: "OFF"
      - light.turn_on:
          id: button_light_switch_ds
          effect: "Standby2"
          brightness: 30%
      - logger.log: "BoilerRelayBoard DS AUTO mode OFF"
      - display.page.show: page3
      # Then also set the respective screen element to AUTO
      - text_sensor.template.publish:
          id: text_state_ds_heating
          state: !lambda |-
            return {"off"};

    # ###### General cleanup scripts #######

  - id: boost_mode_off_ds
    # Return LED and text sensor off
    mode: single
    then:
      - light.turn_on:
          id: button_light_switch_ds
          effect: "Standby2"
          brightness: 30%
      - text_sensor.template.publish:
          id: text_state_ds_heating
          state: !lambda |-
            return {"off"};

  - id: boost_mode_off_us
    # Return LED and text sensor off
    mode: single
    then:
      - light.turn_on:
          id: button_light_switch_us
          effect: "Standby2"
          brightness: 30%
      - text_sensor.template.publish:
          id: text_state_us_heating
          state: !lambda |-
            return {"off"};

  - id: turn_off_downstairs
    # Turns off a zone if the button is long-pressed
    mode: single
    then:
      - switch.turn_off: brb_ds_direct
      - script.execute: reset_text_time_ds_heating
      - light.turn_on:
          id: button_light_switch_ds
          effect: "Standby2"
          brightness: 30%
      - logger.log: "BoilerRelayBoard DS off longpress"

  - id: turn_off_upstairs
    # Turns off a zone if the button is long-pressed
    mode: single
    then:
      - switch.turn_off: brb_us_direct
      - script.execute: reset_text_time_us_heating
      - light.turn_on:
          id: button_light_switch_us
          effect: "Standby2"
          brightness: 30%
      - logger.log: "BoilerRelayBoard US off longpress"

  - id: turn_off_hot_water
    # Turns off a zone if the button is long-pressed
    mode: single
    then:
      - switch.turn_off: brb_hot_water_direct
      - script.execute: reset_text_state_hot_water
      - light.turn_on:
          id: button_light_switch_dhw
          effect: "Standby2"
          brightness: 30%
      - logger.log: "BoilerRelayBoard Hot Water BOOST off longpress"

  - id: reset_text_time_ds_heating
    mode: single
    then: 
      - text_sensor.template.publish:
          id: text_state_ds_heating
          state: !lambda |-
            return {"off"};
      - text_sensor.template.publish:
          id: text_time_ds_heating
          state: !lambda |-
            return {""};

  - id: reset_text_time_us_heating
    mode: single
    then: 
      - text_sensor.template.publish:
          id: text_state_us_heating
          state: !lambda |-
            return {"off"};
      - text_sensor.template.publish:
          id: text_time_us_heating
          state: !lambda |-
            return {""};

  - id: reset_text_state_hot_water
    mode: single
    then: 
      - text_sensor.template.publish:
          id: text_state_hot_water
          state: !lambda |-
            return {"off"};
      - text_sensor.template.publish:
          id: text_time_hot_water
          state: !lambda |-
            return {""};

sensor:
  # Zone and hot-tank temperature sensor data ingest 
  - platform: homeassistant
    id: upstairs_room_temps_average
    entity_id: sensor.upstairs_room_temps_average
  - platform: homeassistant
    id: downstairs_room_temps_average
    entity_id: sensor.downstairs_room_temps_average
  - platform: homeassistant
    id: hot_tank_air_temperature_6_filtered
    entity_id: sensor.hot_tank_air_temperature_6_filtered
  - platform: homeassistant
    id: hot_tank_energy
    entity_id: sensor.hot_tank_energy
    

# Climate Thermostat section taken from a good example: https://community.home-assistant.io/t/diy-heating-and-hot-water-controller/321592/2
climate:
  - platform: thermostat
    id: thermostat_us
    name: "Thermostat Upstairs"
    sensor: upstairs_room_temps_average
    preset:
      - name: Normal
        default_target_temperature_low: 20 °C
      - name: Low
        default_target_temperature_low: 17 °C
    visual:
      min_temperature: 16.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.5 °C
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    heat_overrun: 0.5 °C
    heat_deadband: 0.2 °C
    heat_action:
      - switch.turn_on: brb_us_direct
    min_idle_time: 0s
    idle_action:
      - switch.turn_off: brb_us_direct
    off_mode:
      - switch.turn_off: brb_us_direct
      - delay: 0.2s  # Clashes with going idle

  - platform: thermostat
    id: thermostat_ds
    name: "Thermostat Downstairs"
    sensor: downstairs_room_temps_average
    preset:
      - name: Normal
        default_target_temperature_low: 21 °C
      - name: Low
        default_target_temperature_low: 18 °C
    visual:
      min_temperature: 16.0 °C
      max_temperature: 24.0 °C
      temperature_step: 0.5 °C
    min_heating_off_time: 300s
    min_heating_run_time: 300s
    heat_overrun: 0.5 °C
    heat_deadband: 0.2 °C
    heat_action:
      - switch.turn_on: brb_ds_direct
    min_idle_time: 0s
    idle_action:
      - switch.turn_off: brb_ds_direct
    off_mode:
      - switch.turn_off: brb_ds_direct
      - delay: 0.2s  # Clashes with going idle
